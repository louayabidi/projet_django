# apps/forum/views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Post, Comment
from .forms import PostForm, CommentForm

# ===== IMPORTS DES SERVICES IA =====

# Summarizer
try:
    from .summarizer import discussion_summarizer
    SUMMARIZER_AVAILABLE = True
    print(" Summarizer charg√©")
except ImportError as e:
    print(f" Summarizer non disponible: {e}")
    SUMMARIZER_AVAILABLE = False
    
    class BasicSummarizer:
        def should_summarize(self, text):
            return len(text.split()) > 80 if text else False
        
        def summarize_text(self, text, max_length=150, min_length=50):
            if not text:
                return ""
            if len(text) <= max_length:
                return text
            return text[:max_length-3] + '...'
    
    discussion_summarizer = BasicSummarizer()

# Toxicity Detector
try:
    from .toxicity_detector import toxicity_detector
    TOXICITY_DETECTOR_AVAILABLE = True
    print(" Toxicity detector charg√©")
except ImportError:
    print(" Toxicity detector non disponible")
    TOXICITY_DETECTOR_AVAILABLE = False
    
    class BasicToxicityDetector:
        def analyze_toxicity(self, text):
            # D√©tection basique de mots interdits
            toxic_words = ['stupide', 'idiot', 'imb√©cile', 'connard', 'merde', 'salop', 'putain']
            if any(word in text.lower() for word in toxic_words):
                return 0.8
            return 0.1
    
    toxicity_detector = BasicToxicityDetector()

# AI Response Generator
try:
    from .ai_response_generator import ai_response_generator
    AI_RESPONSE_AVAILABLE = True
    print(" G√©n√©rateur de r√©ponses IA charg√©")
except ImportError as e:
    print(f" G√©n√©rateur IA non disponible: {e}")
    AI_RESPONSE_AVAILABLE = False
    
    # Fallback basique
    class BasicResponseGenerator:
        def generate_responses(self, post_content, num_responses=3, max_length=100):
            return [
                "Cette discussion soul√®ve des points tr√®s int√©ressants sur la litt√©rature contemporaine.",
                "Je trouve votre analyse particuli√®rement pertinente dans le contexte actuel.",
                "Votre perspective ouvre des pistes de r√©flexion passionnantes pour les amateurs de litt√©rature.",
                "Excellente contribution qui enrichit consid√©rablement notre d√©bat litt√©raire.",
            ][:num_responses]
    
    ai_response_generator = BasicResponseGenerator()

# ===== VUES =====

def post_list(request):
    """Liste toutes les discussions du forum"""
    posts = Post.objects.all()
    total_comments = Comment.objects.count()
    
    # Pr√©parer les donn√©es pour le template
    for post in posts:
        if SUMMARIZER_AVAILABLE:
            post.has_summary = discussion_summarizer.should_summarize(post.content)
            if post.has_summary:
                post.summary = discussion_summarizer.summarize_text(post.content)
        else:
            # Fallback si summarizer non disponible
            post.has_summary = len(post.content.split()) > 80 if post.content else False
            if post.has_summary and post.content:
                post.summary = post.content[:147] + '...' if len(post.content) > 150 else post.content
        
        post.word_count = len(post.content.split()) if post.content else 0
    
    return render(request, 'forum/post_list.html', {
        'posts': posts,
        'total_comments': total_comments
    })

def post_detail(request, pk):
    post = get_object_or_404(Post, pk=pk)
    comments = post.comments.all()
    
    # G√©n√©rer le r√©sum√©
    summary = None
    if SUMMARIZER_AVAILABLE:
        if discussion_summarizer.should_summarize(post.content):
            summary = discussion_summarizer.summarize_text(post.content)
    
    # G√©n√©rer des r√©ponses IA - APPEL CORRIG√â
    ai_responses = []
    if AI_RESPONSE_AVAILABLE and post.content:
        try:
            # SEULEMENT num_responses, pas de max_length
            ai_responses = ai_response_generator.generate_responses(
                post.content, 
                num_responses=3
            )
            print(f"üéØ {len(ai_responses)} r√©ponses IA g√©n√©r√©es")
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration r√©ponses IA: {e}")
            ai_responses = []
    
    # ===== GESTION DES COMMENTAIRES =====
    if request.method == 'POST' and request.user.is_authenticated:
        comment_form = CommentForm(request.POST)
        if comment_form.is_valid():
            content = comment_form.cleaned_data['content']
            
            # V√©rifier la toxicit√©
            toxicity_score = 0.1  # Valeur par d√©faut safe
            if TOXICITY_DETECTOR_AVAILABLE:
                toxicity_score = toxicity_detector.analyze_toxicity(content)
            
            if toxicity_score >= 0.7:
                messages.error(
                    request, 
                    f"Commentaire d√©tect√© comme inappropri√© (score: {toxicity_score:.2f}). "
                    "Veuillez reformuler votre message."
                )
                return render(request, 'forum/post_detail.html', {
                    'post': post,
                    'comments': comments,
                    'comment_form': comment_form,
                    'toxicity_score': toxicity_score,
                    'summary': summary,
                    'ai_responses': ai_responses
                })
            else:
                # Commentaire acceptable
                comment = comment_form.save(commit=False)
                comment.post = post
                comment.author = request.user
                comment.save()
                
                messages.success(request, "Votre commentaire a √©t√© publi√© avec succ√®s!")
                return redirect('forum:post_detail', pk=post.pk)
    else:
        comment_form = CommentForm()
    
    return render(request, 'forum/post_detail.html', {
        'post': post,
        'comments': comments,
        'comment_form': comment_form,
        'summary': summary,
        'ai_responses': ai_responses,
        'toxicity_score': None  # Reset pour les requ√™tes GET
    })

@login_required
def post_create(request):
    """Cr√©ation d'une nouvelle discussion"""
    if request.method == 'POST':
        form = PostForm(request.POST)
        if form.is_valid():
            # V√©rifier la toxicit√© du post
            content = form.cleaned_data['content']
            toxicity_score = 0.1
            if TOXICITY_DETECTOR_AVAILABLE:
                toxicity_score = toxicity_detector.analyze_toxicity(content)
            
            if toxicity_score >= 0.7:
                messages.error(
                    request,
                    f"Votre publication a √©t√© d√©tect√©e comme inappropri√©e (score: {toxicity_score:.2f}). "
                    "Veuillez reformuler votre message."
                )
                return render(request, 'forum/post_form.html', {
                    'form': form,
                    'title': 'Cr√©er une discussion'
                })
            
            post = form.save(commit=False)
            post.author = request.user
            post.save()
            
            messages.success(request, 'Votre discussion a √©t√© cr√©√©e avec succ√®s!')
            return redirect('forum:post_detail', pk=post.pk)
    else:
        form = PostForm()
    
    return render(request, 'forum/post_form.html', {
        'form': form,
        'title': 'Cr√©er une discussion'
    })

@login_required
def post_edit(request, pk):
    """Modification d'une discussion existante"""
    post = get_object_or_404(Post, pk=pk, author=request.user)
    
    if request.method == 'POST':
        form = PostForm(request.POST, instance=post)
        if form.is_valid():
            # V√©rifier la toxicit√© de l'√©dition
            content = form.cleaned_data['content']
            toxicity_score = 0.1
            if TOXICITY_DETECTOR_AVAILABLE:
                toxicity_score = toxicity_detector.analyze_toxicity(content)
            
            if toxicity_score >= 0.7:
                messages.error(
                    request,
                    f"Votre modification a √©t√© d√©tect√©e comme inappropri√©e (score: {toxicity_score:.2f})."
                )
                return render(request, 'forum/post_form.html', {
                    'form': form,
                    'title': 'Modifier la discussion'
                })
            
            form.save()
            messages.success(request, 'Votre discussion a √©t√© modifi√©e avec succ√®s!')
            return redirect('forum:post_detail', pk=post.pk)
    else:
        form = PostForm(instance=post)
    
    return render(request, 'forum/post_form.html', {
        'form': form,
        'title': 'Modifier la discussion'
    })

@login_required
def post_delete(request, pk):
    """Suppression d'une discussion"""
    post = get_object_or_404(Post, pk=pk, author=request.user)
    
    if request.method == 'POST':
        post_title = post.title
        post.delete()
        messages.success(request, f'La discussion "{post_title}" a √©t√© supprim√©e avec succ√®s!')
        return redirect('forum:post_list')
    
    return render(request, 'forum/post_confirm_delete.html', {'post': post})